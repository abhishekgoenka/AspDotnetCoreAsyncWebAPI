# .NET with Angular
# Build a .NET project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/ecosystems/dotnet-core

# Set MyRunNumber
variables: 
  uiSource: "."
  uiBuild: "$(uiSource)/dist"
  BuildNumber: '1.0.0-CI-$(Build.BuildNumber)'
  tag: '$(Build.BuildNumber)'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

name: 1.0$(Rev:.r)

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    
- task: DotNetCoreCLI@2
  displayName: Server Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Server Test
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)' 

- script: |
    dotnet test ".\server\DotNetCoreAsysnSample.Tests\DotNetCoreAsysnSample.Tests.csproj" --logger trx
  displayName: Generate test trx file

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @angular/cli
  displayName: 'Angular CLI'

- script: |
    npm install
  displayName: 'npm install'
  workingDirectory: client

- script: |
    npm run build
  displayName: 'Angular build'
  workingDirectory: client

- task: PublishBuildArtifacts@1
  displayName: Publish Client Artifacts
  inputs:
    PathtoPublish: 'client/dist/app'
    ArtifactName: 'client'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: Publish Server Artifacts
  inputs:
    PathtoPublish: 'server/DotNetCoreAsysnSample/bin/Release/net5.0'
    ArtifactName: 'server'
    publishLocation: 'Container'
